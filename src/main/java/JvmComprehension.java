//JVM пользуется байткодом который получился после java-компиляции
//JVM просит систему подзагрузки классов заугрузить классы JvmComprehension и Option
// Система подзагрузки классов вызовет Application ClassLoader он вызовет Platform ClassLoader
// он вызовет Bootstrap ClassLoader. Этот Bootstrap ClassLoader загрузит классы, которые входят в стандартный пакет java.
// Platform ClassLoader загрузит классы которые мы написали в Metaspace.
//Application ClassLoader загружает классы, которые находятся в сторонних библиотеках. В данном примере ничего не подгрузит.
//
public class JvmComprehension {

    public static void main(String[] args) { // При вызове метода он попадает в стек и получается фрейм.
        int i = 1;                      // 1 В фрейме создастся примитивный тип.
        Object o = new Object();        // 2 В куче создастся объект класса Object, а во фрейме ссылочная переменная "о"
                                        // которая будет ссылаться на этот объект.
        Integer ii = 2;                 // 3 В куче создастся объект класса Integer, а во фрейме ссылочная переменная "ii"
                                        // которая будет ссылаться на этот объект.
        printAll(o, i, ii);             // 4 При вызове метода он попадает в стек и получается фрейм, который будет
                                        // над фреймом main.\
                                   // Так как фреймы, которые стояли выше закрылись, начинает выполняться фрейм main.
        System.out.println("finished"); // 7 Создаётся новый фрейм и в куче создается объект String, создаётся ссылка на него.
        //После того как отработает этот фрейм он закроется и начнется опять выполнение фрейма main.
        //Так как фрейм main корневой, а в нем больше выполнять нечего то фрейм закроется что означает окончание работы программы.
    }

    private static void printAll(Object o, int i, Integer ii) {  // В этом фрейме создастся две ссылочных переменных,
                                                        // которые будут ссылаться на уже созданные в куче объекты класса.
                                                         //Это Object и Integer. Также создается примитивная переменная "i"
        Integer uselessVar = 700;    // 5 В куче создастся объект класса Integer, а во фрейме ссылочная переменная "uselessVar"
                                    // которая будет ссылаться на этот объект.
        System.out.println(o.toString() + i + ii);  // 6 Создастся 3 фрейм в стеке в котором создадутся 2 ссылки
        // на o.toString и ii. Также будет создан примитив в фрейме "i".
        //После того как фрейм отработает, он закроется. Сначала фрейм System.out.println
        //Потом фрейм printAll закроется.
    }
}

